{
  "className": "qx.ui.mobile.form.RadioGroup",
  "packageName": "qx.ui.mobile.form",
  "name": "RadioGroup",
  "superClass": "qx.ui.form.RadioGroup",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 42,
        "column": 0
      },
      "end": {
        "line": 46,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<pre><code>*****************************************************************\n</code></pre>\n<p>qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n     2004-2012 1&amp;1 Internet AG, Germany, http://www.1und1.de\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n   Authors:\n Christopher Zuendorf (czuendorf)\n    <strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong><strong><em></em></em></strong><strong><em><em></em></strong></em>*</p>"
        },
        {
          "name": "@description",
          "body": "<p>The Radio button group for mobile usage.\n<em>Example</em>\n </p>\n<pre class='javascript'>\n    var form = new qx.ui.mobile.form.Form();\n    var radio1 = new qx.ui.mobile.form.RadioButton();\n    var radio2 = new qx.ui.mobile.form.RadioButton();\n    var radio3 = new qx.ui.mobile.form.RadioButton();\n    var radiogroup = new qx.ui.mobile.form.RadioGroup(radio1, radio2, radio3);\n    form.add(radio1, \"Germany\");\n    form.add(radio2, \"UK\");\n    form.add(radio3, \"USA\");\n    this.getRoot.add(new qx.ui.mobile.form.renderer.Single(form));\n </pre>"
        }
      ]
    }
  },
  "type": "class",
  "members": {
    "getSelection": {
      "type": "function",
      "name": "getSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.ISingleSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an array of currently selected items.\n Note: The result is only a set of selected items, so the order can\n differ from the sequence in which the items were added.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} List of items.",
            "type": "qx.ui.core.Widget[]",
            "description": " List of items."
          }
        ]
      }
    },
    "setSelection": {
      "type": "function",
      "name": "setSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.ISingleSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replaces current selection with the given items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "items {qx.ui.core.Widget[]} Items to select.",
            "paramName": "items",
            "description": " Items to select.",
            "type": "qx.ui.core.Widget[]"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the item is not a child element.",
            "type": "Error",
            "description": " if the item is not a child element."
          }
        ]
      }
    },
    "resetSelection": {
      "type": "function",
      "name": "resetSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.ISingleSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clears the whole selection at once.</p>"
          }
        ]
      }
    },
    "isSelected": {
      "type": "function",
      "name": "isSelected",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.ISingleSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the given item is currently selected.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} Any valid selectable item",
            "paramName": "item",
            "description": " Any valid selectable item",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the item is selected.",
            "type": "Boolean",
            "description": " Whether the item is selected."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the item is not a child element.",
            "type": "Error",
            "description": " if the item is not a child element."
          }
        ]
      }
    },
    "isSelectionEmpty": {
      "type": "function",
      "name": "isSelectionEmpty",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.ISingleSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the selection is empty.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the selection is empty.",
            "type": "Boolean",
            "description": " Whether the selection is empty."
          }
        ]
      }
    },
    "getSelectables": {
      "type": "function",
      "name": "getSelectables",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.ISingleSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns all elements which are selectable.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "all {Boolean} true for all selectables, false for the\n   selectables the user can interactively select",
            "paramName": "all",
            "description": " true for all selectables, false for the\n   selectables the user can interactively select",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} The contained items.",
            "type": "qx.ui.core.Widget[]",
            "description": " The contained items."
          }
        ]
      }
    },
    "setValue": {
      "type": "function",
      "name": "setValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IField",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  VALUE PROPERTY\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Sets the field model value. Should also update the UI.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var|null} Updates the field with the new model value.",
            "paramName": "value",
            "description": " Updates the field with the new model value.",
            "type": [
              "var",
              "null"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null|Error} Should return an error when the type of\n  model value is not compatible with the implementing class (the concrete field).",
            "type": "null|Error",
            "description": " Should return an error when the type of\n  model value is not compatible with the implementing class (the concrete field)."
          }
        ]
      }
    },
    "resetValue": {
      "type": "function",
      "name": "resetValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IField",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resets the model value to its initial value. Should also update the UI.</p>"
          }
        ]
      }
    },
    "getValue": {
      "type": "function",
      "name": "getValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IField",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a consistent and up-to-date model value.\n Note: returned value can also be a promise of type <code>Promise&amp;lt;*|null&amp;gt;</code>.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var|null} The model value plain or as promise.",
            "type": "var|null",
            "description": " The model value plain or as promise."
          }
        ]
      }
    },
    "setEnabled": {
      "type": "function",
      "name": "setEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for enabled"
          }
        ]
      }
    },
    "getEnabled": {
      "type": "function",
      "name": "getEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for enabled"
          }
        ]
      }
    },
    "setRequired": {
      "type": "function",
      "name": "setRequired",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>required</code>.\n\nFor further details take a look at the property definition: {@link #required}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for required"
          }
        ]
      }
    },
    "getRequired": {
      "type": "function",
      "name": "getRequired",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>required</code>.\n\nFor further details take a look at the property definition: {@link #required}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for required"
          }
        ]
      }
    },
    "setValid": {
      "type": "function",
      "name": "setValid",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>valid</code>.\n\nFor further details take a look at the property definition: {@link #valid}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for valid"
          }
        ]
      }
    },
    "getValid": {
      "type": "function",
      "name": "getValid",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>valid</code>.\n\nFor further details take a look at the property definition: {@link #valid}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for valid"
          }
        ]
      }
    },
    "setInvalidMessage": {
      "type": "function",
      "name": "setInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>invalidMessage</code>.\n\nFor further details take a look at the property definition: {@link #invalidMessage}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for invalidMessage"
          }
        ]
      }
    },
    "getInvalidMessage": {
      "type": "function",
      "name": "getInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>invalidMessage</code>.\n\nFor further details take a look at the property definition: {@link #invalidMessage}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for invalidMessage"
          }
        ]
      }
    },
    "setRequiredInvalidMessage": {
      "type": "function",
      "name": "setRequiredInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>requiredInvalidMessage</code>.\n\nFor further details take a look at the property definition: {@link #requiredInvalidMessage}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for requiredInvalidMessage"
          }
        ]
      }
    },
    "getRequiredInvalidMessage": {
      "type": "function",
      "name": "getRequiredInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>requiredInvalidMessage</code>.\n\nFor further details take a look at the property definition: {@link #requiredInvalidMessage}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for requiredInvalidMessage"
          }
        ]
      }
    },
    "setModelSelection": {
      "type": "function",
      "name": "setModelSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IModelSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tries to set the selection using the given array containing the\n representative models for the selectables.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Array} An array of models.",
            "paramName": "value",
            "description": " An array of models.",
            "type": "Array"
          }
        ]
      }
    },
    "getModelSelection": {
      "type": "function",
      "name": "getModelSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.form.IModelSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an array of the selected models.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array containing the models of the currently selected\n   items.",
            "type": "Array",
            "description": " An array containing the models of the currently selected\n   items."
          }
        ]
      }
    },
    "_onChangeSelected": {
      "type": "function",
      "name": "_onChangeSelected",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.MSingleSelectionHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>---------------------------------------------------------------------------\n  EVENT HANDLER\n---------------------------------------------------------------------------\n</code></pre>"
          },
          {
            "name": "@description",
            "body": "<p>Event listener for <code>changeSelected</code> event on single\n selection manager.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Data event.",
            "paramName": "e",
            "description": " Data event.",
            "type": "qx.event.type.Data"
          }
        ]
      }
    },
    "__getManager": {
      "type": "function",
      "name": "__getManager",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.core.MSingleSelectionHandling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the selection manager if it is already exists, otherwise creates\n the manager.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.SingleSelectionManager} Single selection manager.",
            "type": "qx.ui.core.SingleSelectionManager",
            "description": " Single selection manager."
          }
        ]
      }
    },
    "__onModelSelectionChange": {
      "type": "function",
      "name": "__onModelSelectionChange",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.form.MModelSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for the selection change of the including class e.g. SelectBox,\n List, …\n It sets the new modelSelection via {@link #setModelSelection}.</p>"
          }
        ]
      }
    },
    "__onModelSelectionArrayChange": {
      "type": "function",
      "name": "__onModelSelectionArrayChange",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.ui.form.MModelSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener for the change of the internal model selection data array.</p>"
          }
        ]
      }
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getGroupedProperty": {
      "type": "function",
      "name": "getGroupedProperty",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>groupedProperty</code>.\n\nFor further details take a look at the property definition: {@link #groupedProperty}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for groupedProperty"
          }
        ]
      }
    },
    "setGroupedProperty": {
      "type": "function",
      "name": "setGroupedProperty",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>groupedProperty</code>.\n\nFor further details take a look at the property definition: {@link #groupedProperty}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for groupedProperty"
          }
        ]
      }
    },
    "resetGroupedProperty": {
      "type": "function",
      "name": "resetGroupedProperty",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>groupedProperty</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #groupedProperty}."
          }
        ]
      }
    },
    "getGroupProperty": {
      "type": "function",
      "name": "getGroupProperty",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>groupProperty</code>.\n\nFor further details take a look at the property definition: {@link #groupProperty}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for groupProperty"
          }
        ]
      }
    },
    "setGroupProperty": {
      "type": "function",
      "name": "setGroupProperty",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>groupProperty</code>.\n\nFor further details take a look at the property definition: {@link #groupProperty}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for groupProperty"
          }
        ]
      }
    },
    "resetGroupProperty": {
      "type": "function",
      "name": "resetGroupProperty",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>groupProperty</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #groupProperty}."
          }
        ]
      }
    },
    "isEnabled": {
      "type": "function",
      "name": "isEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for enabled"
          }
        ]
      }
    },
    "resetEnabled": {
      "type": "function",
      "name": "resetEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>enabled</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ]
      }
    },
    "getWrap": {
      "type": "function",
      "name": "getWrap",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>wrap</code>.\n\nFor further details take a look at the property definition: {@link #wrap}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for wrap"
          }
        ]
      }
    },
    "isWrap": {
      "type": "function",
      "name": "isWrap",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>wrap</code>.\n\nFor further details take a look at the property definition: {@link #wrap}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for wrap"
          }
        ]
      }
    },
    "setWrap": {
      "type": "function",
      "name": "setWrap",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>wrap</code>.\n\nFor further details take a look at the property definition: {@link #wrap}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for wrap"
          }
        ]
      }
    },
    "resetWrap": {
      "type": "function",
      "name": "resetWrap",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>wrap</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #wrap}."
          }
        ]
      }
    },
    "getAllowEmptySelection": {
      "type": "function",
      "name": "getAllowEmptySelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowEmptySelection</code>.\n\nFor further details take a look at the property definition: {@link #allowEmptySelection}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowEmptySelection"
          }
        ]
      }
    },
    "isAllowEmptySelection": {
      "type": "function",
      "name": "isAllowEmptySelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowEmptySelection</code>.\n\nFor further details take a look at the property definition: {@link #allowEmptySelection}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowEmptySelection"
          }
        ]
      }
    },
    "setAllowEmptySelection": {
      "type": "function",
      "name": "setAllowEmptySelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowEmptySelection</code>.\n\nFor further details take a look at the property definition: {@link #allowEmptySelection}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for allowEmptySelection"
          }
        ]
      }
    },
    "resetAllowEmptySelection": {
      "type": "function",
      "name": "resetAllowEmptySelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>allowEmptySelection</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #allowEmptySelection}."
          }
        ]
      }
    },
    "isValid": {
      "type": "function",
      "name": "isValid",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>valid</code>.\n\nFor further details take a look at the property definition: {@link #valid}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for valid"
          }
        ]
      }
    },
    "resetValid": {
      "type": "function",
      "name": "resetValid",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>valid</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #valid}."
          }
        ]
      }
    },
    "isRequired": {
      "type": "function",
      "name": "isRequired",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>required</code>.\n\nFor further details take a look at the property definition: {@link #required}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for required"
          }
        ]
      }
    },
    "resetRequired": {
      "type": "function",
      "name": "resetRequired",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>required</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #required}."
          }
        ]
      }
    },
    "resetInvalidMessage": {
      "type": "function",
      "name": "resetInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>invalidMessage</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #invalidMessage}."
          }
        ]
      }
    },
    "resetRequiredInvalidMessage": {
      "type": "function",
      "name": "resetRequiredInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>requiredInvalidMessage</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #requiredInvalidMessage}."
          }
        ]
      }
    }
  },
  "descendants": []
}